{"version":3,"sources":["user_location.svg","message_location.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","myIcon","L","icon","iconUrl","userLocation","iconSize","iconAnchor","popupAnchor","messageIcon","messageLocation","schema","Joi","object","keys","name","string","min","max","required","message","API_URL","window","location","hostname","App","state","lat","lng","haveUsersLocation","zoom","userMessage","sendingMessage","sentMessage","messages","formIsValid","_this","validate","error","formSubmitted","event","preventDefault","setState","fetch","method","headers","content-type","body","JSON","stringify","latitude","longitude","then","res","json","console","log","setTimeout","valueChanged","_event$target","target","value","prevState","Object","objectSpread","defineProperty","_this2","this","haveSeenLocation","reduce","all","key","concat","toFixed","otherMessages","push","navigator","geolocation","getCurrentPosition","position","coords","react_default","a","createElement","className","Map","center","TileLayer","attribution","url","Marker","map","_id","Popup","Card","CardTitle","CardText","src","alt","Form","onSubmit","FormGroup","Label","for","Input","onChange","type","id","placeholder","Button","color","disabled","Component","Boolean","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.688d7491.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user_location.3fd7abd3.svg\";","module.exports = __webpack_public_path__ + \"static/media/message_location.ff1c0bff.svg\";","import React, { Component } from 'react';\nimport './App.css';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport {\n  Card,\n  CardTitle,\n  CardText,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Button\n} from 'reactstrap';\nimport Joi from '@hapi/joi';\nimport userLocation from './user_location.svg';\nimport messageLocation from './message_location.svg';\n\nconst myIcon = L.icon({\n  iconUrl: userLocation,\n  iconSize: [50, 82],\n  iconAnchor: [0, 82],\n  popupAnchor: [25, -65]\n});\n\nconst messageIcon = L.icon({\n  iconUrl: messageLocation,\n  iconSize: [50, 82],\n  iconAnchor: [0, 82],\n  popupAnchor: [25, -65]\n});\n\nconst schema = Joi.object().keys({\n  name: Joi.string()\n    .min(1)\n    .max(500)\n    .required(),\n  message: Joi.string()\n    .min(1)\n    .max(500)\n    .required()\n});\n\nconst API_URL =\n  window.location.hostname === 'localhost'\n    ? 'http://localhost:5000/api/v1/messages'\n    : 'https://api.cesarn.website/api/v1/messages';\n\nclass App extends Component {\n  state = {\n    location: {\n      lat: 51.505,\n      lng: -0.09\n    },\n    haveUsersLocation: false,\n    zoom: 2,\n    userMessage: {\n      name: '',\n      message: ''\n    },\n    sendingMessage: false,\n    sentMessage: false,\n    messages: []\n  };\n\n  componentDidMount() {\n\n    fetch(API_URL)\n      .then(res => res.json())\n      .then(messages => {\n        const haveSeenLocation = {};\n        messages = messages.reduce((all, message) => {\n          const key = `${message.latitude.toFixed(3)}${message.longitude.toFixed(3)}`;\n          if(haveSeenLocation[key]){\n            haveSeenLocation[key].otherMessages = haveSeenLocation[key].otherMessages || [];\n            haveSeenLocation[key].otherMessages.push(message);\n          }else{\n            haveSeenLocation[key] = message;\n            all.push(message);\n          }\n          return all;\n        }, []);\n\n        this.setState({\n          messages\n        });\n      })\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        this.setState({\n          location: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          },\n          haveUsersLocation: true,\n          zoom: 13\n        });\n        console.log(position);\n      },\n      () => {\n        console.log('sem localização');\n        fetch('https://ipapi.co/json')\n          .then((res) => res.json())\n          .then((location) => {\n            console.log(location);\n            this.setState({\n              location: {\n                lat: location.latitude,\n                lng: location.longitude\n              },\n              haveUsersLocation: true,\n              zoom: 13\n            });\n          });\n      }\n    );\n  }\n\n  formIsValid = () => {\n    const userMessage = {\n      name: this.state.userMessage.name,\n      message: this.state.userMessage.message\n    };\n    const result = Joi.validate(userMessage, schema);\n\n    return !result.error && this.state.haveUsersLocation ? true : false;\n  };\n\n  formSubmitted = (event) => {\n    event.preventDefault();\n\n    if (this.formIsValid()) {\n      \n      this.setState({\n        sendingMessage: true\n      });\n\n      fetch(API_URL, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: this.state.userMessage.name,\n          message: this.state.userMessage.message,\n          latitude: this.state.location.lat,\n          longitude: this.state.location.lng\n        })\n      })\n        .then((res) => res.json())\n        .then((message) => {\n          console.log(message);\n          setTimeout(() => {\n            this.setState({\n              sendingMessage: false,\n              sentMessage: true\n            });\n          }, 3000);\n        });\n    }\n  };\n\n  valueChanged = (event) => {\n    const { name, value } = event.target;\n    this.setState((prevState) => ({\n      userMessage: {\n        ...prevState.userMessage,\n        [name]: value\n      }\n    }));\n  };\n\n  render() {\n    const position = [this.state.location.lat, this.state.location.lng];\n    return (\n      <div className=\"map\">\n        <Map className=\"map\" center={position} zoom={this.state.zoom}>\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          {this.state.haveUsersLocation ? (\n            <Marker icon={myIcon} position={position} />\n          ) : (\n            ''\n          )}\n          {this.state.messages.map((message) => (\n            <Marker\n              key={message._id}\n              icon={messageIcon}\n              position={[message.latitude, message.longitude]}\n            >\n              <Popup>\n                { message.otherMessages ? message.otherMessages.map(message => \n                <p key={message._id}><em>{message.name}:</em> {message.message}</p>\n                ) : ''}\n              </Popup>\n            </Marker>\n          ))}\n        </Map>\n        <Card body className=\"message-form\">\n          <CardTitle>Welcome to GuestMap!</CardTitle>\n          <CardText>Leave a message with your location!</CardText>\n          {!this.state.sendingMessage &&\n          !this.state.sentMessage &&\n          this.state.haveUsersLocation ? (\n            <Form onSubmit={this.formSubmitted}>\n              <CardText>Thanks for stopping by!</CardText>\n              <FormGroup>\n                <Label for=\"name\">Name</Label>\n                <Input\n                  onChange={this.valueChanged}\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"name\"\n                  placeholder=\"Enter your name\"\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"message\">Message</Label>\n                <Input\n                  onChange={this.valueChanged}\n                  type=\"textarea\"\n                  name=\"message\"\n                  id=\"message\"\n                  placeholder=\"Enter your message\"\n                />\n              </FormGroup>\n              <Button\n                type=\"submit\"\n                color=\"info\"\n                disabled={!this.formIsValid()}\n              >\n                Send\n              </Button>\n            </Form>\n          ) : this.state.sendingMessage || !this.state.haveUsersLocation ? (\n            <img\n              className=\"loading\"\n              src=\"https://loading.io/spinners/rolling/lg.curve-bars-loading-indicator.gif\"\n              alt=\"Loading\"\n            />\n          ) : (\n            <CardText>Thanks for your message!</CardText>\n          )}\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport \"leaflet/dist/leaflet.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}